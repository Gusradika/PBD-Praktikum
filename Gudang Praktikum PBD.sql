/* ############################################################ */
/* TABLE MODIFICATION */
/* ############################################################ */

CREATE TABLE "GUDANG"."KATEGORIBARANG" (
	"KODEGOL" VARCHAR2(20 BYTE),
	"NAMAGOL" VARCHAR2(100 BYTE)
);

CREATE TABLE "GUDANG"."BARANG" (
	"KODEBRG" VARCHAR2(20 BYTE),
	"NAMA" VARCHAR2(100 BYTE),
	"SATUAN" VARCHAR2(20 BYTE),
	"HARGABELI" FLOAT(126),
	"KODEGOL" VARCHAR2(20 BYTE)
);

CREATE TABLE "GUDANG"."KARYAWAN" (
	"KODEKAR" VARCHAR2(20 BYTE),
	"NAMA" VARCHAR2(200 BYTE),
	"TELP" VARCHAR2(15 BYTE),
	"PASSWORD" VARCHAR2(50 BYTE),
	"KARYAWAN" VARCHAR2(1 BYTE),
	"BARANG" VARCHAR2(1 BYTE),
	"GOLONGANBARANG" VARCHAR2(1 BYTE),
	"SUPPLIER" VARCHAR2(1 BYTE),
	"PENERIMAAN" VARCHAR2(1 BYTE),
	"PENGELUARAN" VARCHAR2(1 BYTE)
);

CREATE TABLE "GUDANG"."SUPPLIER" (
	"KODESUPP" VARCHAR2(20 BYTE),
	"NAMA" VARCHAR2(100 BYTE),
	"TELP" VARCHAR2(15 BYTE),
	"PERUSAHAAN" VARCHAR2(100 BYTE),
	"ALAMAT" VARCHAR2(200 BYTE)
);

CREATE TABLE "GUDANG"."PENERIMAAN" (
	"KODEPENERIMAAN" VARCHAR2(20 BYTE),
	"TANGGAL" DATE,
	"KODESUP" VARCHAR2(20 BYTE),
	"KODEKAR" VARCHAR2(20 BYTE),
	"KETERANGAN" VARCHAR2(100 BYTE),
	"TOTAL" FLOAT(126)
);

CREATE TABLE "GUDANG"."DETAILPENERIMAAN" (
	"KODEPENERIMAAN" VARCHAR2(20 BYTE),
	"KODEBRG" VARCHAR2(20 BYTE),
	"HARGA" FLOAT(126),
	"JUMLAH" FLOAT(126)
);

CREATE TABLE "GUDANG"."PENGELUARAN" (
	"KODEPENGELUARAN" VARCHAR2(20 BYTE),
	"TANGGAL" DATE,
	"KODEKAR" VARCHAR2(20 BYTE),
	"KETERANGAN" VARCHAR2(100 BYTE),
	"JUMLAH" VARCHAR2(20 BYTE)
);

CREATE TABLE "GUDANG"."DETAILPENGELUARAN" (
	"KODEPENGELUARAN" VARCHAR2(20 BYTE),
	"KODEBRG" VARCHAR2(20 BYTE),
	"JUMLAH" VARCHAR2(20 BYTE)
);

CREATE TABLE "GUDANG"."PENERIMAAN" (
	"KODEPENERIMAAN" VARCHAR2(20 BYTE),
	"TANGGAL" DATE,
	"KODESUP" VARCHAR2(20 BYTE),
	"KODEKAR" VARCHAR2(20 BYTE),
	"KETERANGAN" VARCHAR2(100 BYTE),
	"TOTAL" FLOAT(126)
);

CREATE TABLE "GUDANG"."DETAILPENERIMAAN" (
	"KODEPENERIMAAN" VARCHAR2(20 BYTE),
	"KODEBRG" VARCHAR2(20 BYTE),
	"HARGA" FLOAT(126),
	"JUMLAH" FLOAT(126)
);

/* ############################################################ */
/* INSERT DATA */
/* ############################################################ */

INSERT INTO KATEGORIBARANG VALUES(
	'HRDWR_CPU',
	'Hardware Komponen CPU'
);

INSERT INTO KATEGORIBARANG VALUES(
	'HRDWR_PC',
	'Hardware Komponen Desktop'
);

/* BARANG */
/* ASUS */
INSERT INTO BARANG VALUES(
	'ASUS1650',
	'ASUS GTX 1650 PRO',
	'Unit',
	'5000000',
	'HRDWR_CPU'
);

INSERT INTO BARANG VALUES(
	'ASUS1660',
	'ASUS GTX 1660 PRO',
	'Unit',
	'5400000',
	'HRDWR_CPU'
);

INSERT INTO BARANG VALUES(
	'ASUS2060',
	'ASUS RTX 2060 PRO',
	'Unit',
	'6000000',
	'HRDWR_CPU'
);

INSERT INTO BARANG VALUES(
	'ASUS2070',
	'ASUS RTX 2070 PRO',
	'Unit',
	'6400000',
	'HRDWR_CPU'
);

INSERT INTO BARANG VALUES(
	'NVDA2070',
	'ASUS RTX 2070 PRO',
	'Unit',
	'6400000',
	'HRDWR_CPU'
);

/*  */

/* CONTROL */
DELETE FROM BARANG;

DELETE FROM KATEGORIBARANG;

SELECT
	*
FROM
	KATEGORIBARANG;

SELECT
	*
FROM
	BARANG;

-- PT 3

-- Select
SELECT
	FIRST_NAME,
	LAST_NAME
FROM
	CONTACTS
ORDER BY
	FIRST_NAME,
	LAST_NAME DESC;

-- Select by Collum
SELECT
	FIRST_NAME,
	LAST_NAME
FROM
	CONTACTS
ORDER BY
	1,
	2 DESC;

-- NULL FIRST
SELECT
	COUNTRY_ID,
	CITY,
	STATE
FROM
	LOCATIONS
ORDER BY
	STATE ASC NULLS FIRST;

-- NULL LAST
SELECT
	COUNTRY_ID,
	CITY,
	STATE
FROM
	LOCATIONS
ORDER BY
	STATE ASC NULLS LAST;

-- ORDER BY HURUF BESAR
SELECT
	CUSTOMER_ID,
	NAME
FROM
	CUSTOMERS
ORDER BY
	UPPER(NAME);

-- ORDER DATE DESC
SELECT
	*
FROM
	ORDERS
ORDER BY
	ORDER_DATE DESC;

-- DISTINCT
SELECT
	DISTINCT FIRST_NAME
FROM
	CONTACTS
ORDER BY
	1 ASC;

--
SELECT
	DISTINCT ITEM_ID,
	QUANTITY
FROM
	ORDER_ITEMS
ORDER BY
	ITEM_ID;

-- Pengondisian WHERE
SELECT
	DISTINCT ITEM_ID,
	QUANTITY,
	UNIT_PRICE
FROM
	ORDER_ITEMS
WHERE
	ITEM_ID = '1';

-- CONDITIONAL WHERE
SELECT
	*
FROM
	PRODUCTS
WHERE
	PRODUCT_NAME = 'Kingston';

--CONDITIONAL OPERATOR
SELECT
	*
FROM
	PRODUCTS
WHERE
	LIST_PRICE > 500
	AND LIST_PRICE < 1000
ORDER BY
	LIST_PRICE ASC;

-- PRODUCT
SELECT
	PRODUCT_ID   AS "PRODUCT",
	PRODUCT_NAME AS "nama",
	LIST_PRICE   AS "harga"
FROM
	PRODUCTS
WHERE
	LIST_PRICE > 500
	AND LIST_PRICE < 1000
ORDER BY
	LIST_PRICE;

-- ORDER BY DATE ASC
SELECT
	*
FROM
	ORDERS
WHERE
	STATUS ='Shipped'
	AND SALESMAN_ID = 60
	AND EXTRACT(YEAR FROM ORDER_DATE) = 2017
ORDER BY
	ORDER_DATE ASC;

--
SELECT
	ORDERS.ORDER_ID,
	CUSTOMERS.NAME,
	CUSTOMERS.ADDRESS,
	ORDERS.STATUS,
	ORDERS.ORDER_DATE,
	EMPLOYEES.FIRST_NAME,
	ORDER_ITEMS.ITEM_ID,
	ORDER_ITEMS.PRODUCT_ID,
	PRODUCTS.PRODUCT_NAME,
	ORDER_ITEMS.QUANTITY,
	ORDER_ITEMS.UNIT_PRICE
FROM
	ORDERS
	INNER JOIN ORDER_ITEMS
	ON ORDER_ITEMS.ORDER_ID = ORDERS.ORDER_ID
	INNER JOIN CUSTOMERS
	ON CUSTOMERS.CUSTOMER_ID = ORDERS.CUSTOMER_ID
	INNER JOIN EMPLOYEES
	ON EMPLOYEES.EMPLOYEE_ID = ORDERS.SALESMAN_ID
	INNER JOIN PRODUCTS
	ON ORDER_ITEMS.PRODUCT_ID = ORDERS.SALESMAN_ID
WHERE
	ORDERS.ORDER_ID = 94;