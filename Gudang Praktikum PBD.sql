/* ############################################################ */
/* TABLE MODIFICATION */
/* ############################################################ */

CREATE TABLE "GUDANG"."KATEGORIBARANG" 
   (	"KODEGOL" VARCHAR2(20 BYTE), 
	"NAMAGOL" VARCHAR2(100 BYTE)
   );

CREATE TABLE "GUDANG"."BARANG" 
   (	"KODEBRG" VARCHAR2(20 BYTE), 
	"NAMA" VARCHAR2(100 BYTE), 
	"SATUAN" VARCHAR2(20 BYTE), 
	"HARGABELI" FLOAT(126), 
	"KODEGOL" VARCHAR2(20 BYTE)
   );
   
   CREATE TABLE "GUDANG"."KARYAWAN" 
   (	"KODEKAR" VARCHAR2(20 BYTE), 
	"NAMA" VARCHAR2(200 BYTE), 
	"TELP" VARCHAR2(15 BYTE), 
	"PASSWORD" VARCHAR2(50 BYTE), 
	"KARYAWAN" VARCHAR2(1 BYTE), 
	"BARANG" VARCHAR2(1 BYTE), 
	"GOLONGANBARANG" VARCHAR2(1 BYTE), 
	"SUPPLIER" VARCHAR2(1 BYTE), 
	"PENERIMAAN" VARCHAR2(1 BYTE), 
	"PENGELUARAN" VARCHAR2(1 BYTE)
   );
   
    CREATE TABLE "GUDANG"."SUPPLIER" 
   (	"KODESUPP" VARCHAR2(20 BYTE), 
	"NAMA" VARCHAR2(100 BYTE), 
	"TELP" VARCHAR2(15 BYTE), 
	"PERUSAHAAN" VARCHAR2(100 BYTE), 
	"ALAMAT" VARCHAR2(200 BYTE)
   );
   
   CREATE TABLE "GUDANG"."PENERIMAAN" 
   (	"KODEPENERIMAAN" VARCHAR2(20 BYTE), 
	"TANGGAL" DATE, 
	"KODESUP" VARCHAR2(20 BYTE), 
	"KODEKAR" VARCHAR2(20 BYTE), 
	"KETERANGAN" VARCHAR2(100 BYTE), 
	"TOTAL" FLOAT(126)
   );
   
   CREATE TABLE "GUDANG"."DETAILPENERIMAAN" 
   (	"KODEPENERIMAAN" VARCHAR2(20 BYTE), 
	"KODEBRG" VARCHAR2(20 BYTE), 
	"HARGA" FLOAT(126), 
	"JUMLAH" FLOAT(126)
   );
   
   CREATE TABLE "GUDANG"."PENGELUARAN" 
   (	"KODEPENGELUARAN" VARCHAR2(20 BYTE), 
	"TANGGAL" DATE, 
	"KODEKAR" VARCHAR2(20 BYTE), 
	"KETERANGAN" VARCHAR2(100 BYTE), 
	"JUMLAH" VARCHAR2(20 BYTE)
   );
   
    CREATE TABLE "GUDANG"."DETAILPENGELUARAN" 
   (	"KODEPENGELUARAN" VARCHAR2(20 BYTE), 
	"KODEBRG" VARCHAR2(20 BYTE), 
	"JUMLAH" VARCHAR2(20 BYTE)
   );
   
   CREATE TABLE "GUDANG"."PENERIMAAN" 
   (	"KODEPENERIMAAN" VARCHAR2(20 BYTE), 
	"TANGGAL" DATE, 
	"KODESUP" VARCHAR2(20 BYTE), 
	"KODEKAR" VARCHAR2(20 BYTE), 
	"KETERANGAN" VARCHAR2(100 BYTE), 
	"TOTAL" FLOAT(126)
   );
   
     CREATE TABLE "GUDANG"."DETAILPENERIMAAN" 
   (	"KODEPENERIMAAN" VARCHAR2(20 BYTE), 
	"KODEBRG" VARCHAR2(20 BYTE), 
	"HARGA" FLOAT(126), 
	"JUMLAH" FLOAT(126)
   );
   
   
   /* ############################################################ */
/* INSERT DATA */
/* ############################################################ */

INSERT INTO kategoribarang VALUES('HRDWR_CPU','Hardware Komponen CPU');
INSERT INTO kategoribarang VALUES('HRDWR_PC','Hardware Komponen Desktop');

/* BARANG */
/* ASUS */
INSERT INTO barang VALUES('ASUS1650','ASUS GTX 1650 PRO','Unit','5000000','HRDWR_CPU');
INSERT INTO barang VALUES('ASUS1660','ASUS GTX 1660 PRO','Unit','5400000','HRDWR_CPU');
INSERT INTO barang VALUES('ASUS2060','ASUS RTX 2060 PRO','Unit','6000000','HRDWR_CPU');
INSERT INTO barang VALUES('ASUS2070','ASUS RTX 2070 PRO','Unit','6400000','HRDWR_CPU');


INSERT INTO barang VALUES('NVDA2070','ASUS RTX 2070 PRO','Unit','6400000','HRDWR_CPU');

/*  */

/* CONTROL */
DELETE FROM barang;
DELETE FROM kategoribarang;

SELECT * FROM kategoribarang;
SELECT * FROM barang;

-- PT 3

-- Select 
SELECT first_name, last_name 
FROM contacts
ORDER BY first_name, last_name DESC;

-- Select by Collum
SELECT first_name, last_name 
FROM contacts
ORDER BY 1, 2 DESC;


-- NULL FIRST
SELECT country_id, city, state
FROM locations
ORDER BY STATE ASC NULLS FIRST;

-- NULL LAST
SELECT country_id, city, state
FROM locations
ORDER BY STATE ASC NULLS LAST;

-- ORDER BY HURUF BESAR
SELECT customer_id, name
FROM customers
ORDER BY UPPER(name);

-- ORDER DATE DESC
SELECT * 
FROM orders
ORDER BY order_date DESC;

-- DISTINCT
SELECT DISTINCT first_name
FROM contacts
ORDER BY 1 ASC;

--
SELECT DISTINCT item_id, quantity
FROM order_items
ORDER BY item_id;

-- Pengondisian WHERE
SELECT DISTINCT item_id, quantity, unit_price
FROM order_items
WHERE item_id = '1';


-- CONDITIONAL WHERE
SELECT * FROM products
WHERE product_name = 'Kingston';

--CONDITIONAL OPERATOR
SELECT * FROM
products
WHERE list_price > 500 AND list_price < 1000
ORDER BY list_price ASC;

-- PRODUCT
SELECT product_id as "PRODUCT", product_name as "nama", list_price as "harga"
FROM products
WHERE list_price > 500 AND list_price < 1000
ORDER BY list_price;

-- ORDER BY DATE ASC
SELECT * FROM orders
WHERE status ='Shipped' AND salesman_id = 60 AND extract(YEAR FROM order_date) = 2017
ORDER BY order_date ASC;

-- 